<?xml version="1.0" encoding="UTF-8"?>
<!--共有8个级别，按照从低到高为：all < trace < debug < info < warn < error < fatal < off -->
<!-- all:最低等级的，用于打开所有日志记录 -->
<!-- trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出 -->
<!-- debug:指出细粒度信息事件对调试应用程序是非常有帮助的 -->
<!-- info:消息在粗粒度级别上突出强调应用程序的运行过程 -->
<!-- warn:输出警告及warn以下级别的日志 -->
<!-- error:输出错误信息日志 -->
<!-- fatal:输出每个严重的错误事件将会导致应用程序的退出的日志 -->
<!-- off:最高等级的，用于关闭所有日志记录 -->
<!-- configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!-- monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->
<configuration status="DEBUG" monitorInterval="30">
    <!--
     log4j2使用说明：
      1、使用方式如下：
         private static final Logger logger = LogManager.getLogger(实际类名.class);

      2、日志说明：
         1)请根据实际情况配置各项参数
         2)需要注意日志文件备份数和日志文件大小，注意预留目录空间
         3)实际部署的时候backupFilePatch变量需要修改成linux目录
    -->
    <properties>
        <property name="LOG_HOME">/logs</property>
        <property name="file_name">app.log</property>
        <property name="rolling_file_trace">${LOG_HOME}/trace/%d{yyyy-MM-dd}/app-%d{yyyy-MM-dd}-%i.log.gz</property>
        <property name="rolling_file_debug">${LOG_HOME}/debug/%d{yyyy-MM-dd}/app-%d{yyyy-MM-dd}-%i.log.gz</property>
        <property name="rolling_file_info">${LOG_HOME}/info/%d{yyyy-MM-dd}/app-%d{yyyy-MM-dd}-%i.log.gz</property>
        <property name="rolling_file_warn">${LOG_HOME}/warn/%d{yyyy-MM-dd}/app-%d{yyyy-MM-dd}-%i.log.gz</property>
        <property name="rolling_file_error">${LOG_HOME}/error/%d{yyyy-MM-dd}/app-%d{yyyy-MM-dd}-%i.log.gz</property>
        <property name="output_log_pattern">%-5level %d{yyyy-MM-dd HH:mm:ss z} %class{36} %L %M - %msg%xEx%n</property>
        <!-- 日志切割的最小单位 -->
        <property name="every_file_size">5MB</property>
        <!-- 日志输出级别 -->
        <property name="output_log_level">trace</property>
        <!-- 日志是否追加 -->
        <property name="is_append">true</property>
    </properties>

    <!-- 定义appender -->
    <appenders>
        <!-- 控制台输出的配置 -->
        <Console name="CONSOLE" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="${output_log_level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 这个都知道是输出日志的格式 -->
            <PatternLayout pattern="${output_log_pattern}"/>
        </Console>

        <!-- log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG -->
        <!-- 这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
        <!--
             append这个参数是是否将日志追加的方式打印，如果为false时，tomcat重启后，
             log.txt这里原有的日志就会清空，如果为true时，tomcat重启后，log.txt日志不会清空
        -->
        <!-- TimeBasedTriggeringPolicy标签的interval属性是每天生成一个日志文件 -->
        <!-- Filters.ThresholdFilter -->
        <!-- 字段	        描述 -->
        <!-- level	        输出级别，例：level=”info”,日志级别为info或者以上(匹配的界别) -->
        <!-- onMatch	    DENY/ACCEPT 禁止或者接受（是否接受匹配）-->
        <!-- onMismatch	    DENY/NEUTRAL （是否接受其他高于level的级别）-->

        <!-- 显示TRACE级别之外的信息 -->
        <RollingFile name="TRACE" fileName="logs/trace/${file_name}"
                     filePattern="${rolling_file_trace}" append="${is_append}">
            <PatternLayout pattern="${output_log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <Filters>
                <ThresholdFilter level="debug" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!-- 显示DEBUG级别之外的信息 -->
        <RollingFile name="DEBUG" fileName="logs/debug/${file_name}"
                     filePattern="${rolling_file_debug}" append="${is_append}">
            <PatternLayout pattern="${output_log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <Filters>
                <ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!-- 显示INFO级别的信息 -->
        <RollingFile name="INFO" fileName="logs/info/${file_name}"
                     filePattern="${rolling_file_info}" append="${is_append}">
            <PatternLayout pattern="${output_log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <Filters>
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

        <!-- 显示WARN级别的信息 -->
        <RollingFile name="WARN" fileName="logs/warn/${file_name}"
                     filePattern="${rolling_file_warn}" append="${is_append}">
            <PatternLayout pattern="${output_log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>

        <!-- 显示ERROR级别的信息 -->
        <RollingFile name="ERROR" fileName="logs/error/${file_name}"
                     filePattern="${rolling_file_error}" append="${is_append}">
            <PatternLayout pattern="${output_log_pattern}"/>
            <SizeBasedTriggeringPolicy size="${every_file_size}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1" />
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingFile>
    </appenders>

    <!-- 定义logger，只有定义了logger并引入的appender，appender才会生效 -->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <!-- 建立一个默认的root的logger，需要在root的level中指定输出的级别 -->
        <root level="${output_log_level}">
            <AppenderRef ref="TRACE"/>
            <AppenderRef ref="DEBUG"/>
            <AppenderRef ref="INFO"/>
            <AppenderRef ref="WARN"/>
            <AppenderRef ref="ERROR"/>
            <AppenderRef ref="CONSOLE"/>
        </root>
    </loggers>
</configuration>